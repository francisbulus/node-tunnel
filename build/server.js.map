{"version":3,"sources":["../src/server.js"],"names":["express","http","Server","Request","Response","v4","morgan","EventEmitter","app","server","createServer","io","connections","on","socket","host","handshake","headers","console","log","handleConnError","e","off","handlePing","onDisconnect","once","msg","send","use","req","res","status","id","inbound","method","Object","assign","path","url","onReqError","destroy","Error","handleResponse","statusCode","statusMessage","handleRequestError","writeHead","pipe","outbound","handleSocketError","end"],"mappings":"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","file":"server.js","sourcesContent":["import express from \"express\";\nimport http from \"http\";\nimport { Server } from \"socket.io\";\nimport Request from \"./streams/request.js\";\nimport Response from \"./streams/response.js\";\nimport { v4 } from \"uuid\";\nimport morgan from \"morgan\";\nimport EventEmitter from \"events\";\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);\nlet connections = {};\n\nio.on(\"connection\", (socket) => {\n  const host = socket.handshake.headers.host;\n  connections[host] = socket;\n  console.log(host);\n\n  const handleConnError = (e) => {\n    delete connections[host];\n    socket.off(\"message\", handlePing);\n    socket.off(\"disconnect\", onDisconnect);\n  };\n\n  const onDisconnect = () => {\n    delete connections[host];\n    socket.off(\"message\", handlePing);\n    socket.off(\"error\", handleConnError);\n  };\n\n  socket.once(\"disconnect\", onDisconnect);\n\n  const handlePing = (msg) => {\n    if (msg === \"ping\") {\n      socket.send(\"pong\");\n    }\n  };\n\n  socket.on(\"message\", handlePing);\n  socket.once(\"disconnect\", onDisconnect);\n  socket.once(\"error\", handleConnError);\n});\n\napp.use(morgan(\"tiny\"));\n// app.use(requestID());\n\napp.use(\"/\", (req, res) => {\n  const socket = connections[req.headers.host];\n  if (!socket) {\n    res.status(404);\n    res.send(\"Not Found\");\n    return;\n  }\n  const id = v4();\n  const inbound = new Request({\n    id,\n    socket,\n    req: {\n      method: req.method,\n      headers: Object.assign({}, req.headers),\n      path: req.url,\n    },\n  });\n  const onReqError = (e) => {\n    inbound.destroy(new Error(e || \"Aborted\"));\n  };\n\n  const handleResponse = (statusCode, statusMessage, headers) => {\n    inbound.off(\"requestError\", handleRequestError);\n    res.writeHead(statusCode, statusMessage, headers);\n  };\n\n  req.once(\"aborted\", onReqError);\n  req.once(\"error\", onReqError);\n  req.pipe(inbound);\n  req.once(\"finish\", () => {\n    req.off(\"aborted\", onReqError);\n    req.off(\"error\", onReqError);\n  });\n  const outbound = new Response({ id, socket });\n\n  const handleSocketError = () => {\n    res.end(500);\n  };\n  const handleRequestError = () => {\n    outbound.off(\"response\", handleResponse);\n    outbound.destroy();\n    res.status(502);\n    res.end(\"yikes, there's a equest error\");\n  };\n\n  outbound.once(\"requestError\", handleRequestError);\n  outbound.once(\"response\", handleResponse);\n  outbound.pipe(res);\n  outbound.once(\"error\", handleSocketError);\n  socket.once(\"close\", handleSocketError);\n  res.once(\"close\", () => {\n    socket.off(\"close\", handleSocketError);\n    outbound.off(\"error\", handleSocketError);\n  });\n});\n\nexport default server;\n"]}