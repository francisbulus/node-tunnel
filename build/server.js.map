{"version":3,"sources":["../src/server.js"],"names":["express","http","Server","Request","Response","morgan","crypto","handleBadRequestToSocket","handleRequestError","handleSocketError","handleSocketClientDisconnect","handlePing","handleResponse","handleSocketConnectionError","checkConnection","app","server","createServer","io","connections","on","socket","host","handshake","headers","bind","once","use","req","res","next","locals","id","randomUUID","inbound","method","Object","assign","path","url","off","pipe","outbound","handleSocketErrorWrapper","statusCode","statusMessage"],"mappings":"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","file":"server.js","sourcesContent":["import express from \"express\";\nimport http from \"http\";\nimport { Server } from \"socket.io\";\nimport Request from \"./streams/request.js\";\nimport Response from \"./streams/response.js\";\nimport morgan from \"morgan\";\nimport crypto from \"crypto\";\nimport {\n  handleBadRequestToSocket,\n  handleRequestError,\n  handleSocketError,\n} from \"./utils/error-handlers/server.js\";\nimport {\n  handleSocketClientDisconnect,\n  handlePing,\n} from \"./utils/general-helpers/sockets.js\";\nimport { handleResponse } from \"./utils/general-helpers/server.js\";\nimport { handleSocketConnectionError } from \"./utils/error-handlers/sockets.js\";\nimport { checkConnection } from \"./utils/general-helpers/sockets.js\";\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);\nlet connections = {};\n\nio.on(\"connection\", (socket) => {\n  const host = socket.handshake.headers.host;\n  connections[host] = socket;\n  socket.on(\"message\", handlePing.bind(null, socket));\n  socket.once(\"disconnect\", function () {\n    handleSocketClientDisconnect(socket, connections);\n  });\n  socket.once(\"error\", function () {\n    handleSocketConnectionError(socket, connections);\n  });\n});\n\napp.use(morgan(\"tiny\"));\napp.use(\n  \"/\",\n  (req, res, next) => {\n    checkConnection(req, res, next, connections);\n  },\n  (req, res) => {\n    const socket = res.locals.socket;\n    const id = crypto.randomUUID();\n    const inbound = new Request({\n      id,\n      socket,\n      req: {\n        method: req.method,\n        headers: Object.assign({}, req.headers),\n        path: req.url,\n      },\n    });\n\n    req.once(\"aborted\", handleBadRequestToSocket.bind(null, req));\n    req.once(\"error\", handleBadRequestToSocket.bind(null, req));\n    req.once(\"finish\", () => {\n      req.off(\"aborted\", handleBadRequestToSocket.bind(null, req));\n      req.off(\"error\", handleBadRequestToSocket.bind(null, req));\n    });\n    req.pipe(inbound);\n    const outbound = new Response({ id, socket });\n\n    const handleSocketErrorWrapper = () => {\n      handleSocketError(res);\n    };\n\n    outbound.once(\"requestError\", function () {\n      handleRequestError(res, outbound);\n    });\n    outbound.once(\"response\", function (statusCode, statusMessage, headers) {\n      handleResponse(statusCode, statusMessage, headers, inbound, res);\n    });\n    outbound.once(\"error\", handleSocketErrorWrapper);\n    outbound.pipe(res);\n    res.once(\"close\", () => {\n      socket.off(\"close\", handleSocketErrorWrapper);\n      outbound.off(\"error\", handleSocketErrorWrapper);\n    });\n    socket.once(\"close\", handleSocketErrorWrapper);\n  }\n);\n\nexport default server;\n"]}