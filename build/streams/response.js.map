{"version":3,"sources":["../../src/streams/response.js"],"names":["Readable","Response","constructor","id","socket","_id","_socket","handlePipe","data","push","handlePipes","forEach","chunk","handlePipeEnd","off","handleError","err","destroy","Error","handleResponse","handleBadRequest","emit","statusCode","statusMessage","headers","on","_read","size"],"mappings":"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","file":"response.js","sourcesContent":["import { Readable } from \"stream\";\n\nexport default class Response extends Readable {\n  constructor({ id, socket }) {\n    super();\n    this._id = id;\n    this._socket = socket;\n\n    /* \n    The handlePipe function processes simple chunks of data being piped -\n    ideally this would be data streamed via _write\n   */\n    const handlePipe = (id, data) => {\n      if (this._id === id) this.push(data);\n    };\n    /* \n    handlePipes processes multiple chunks of data being piped -\n    ideally this would be data streamed via _writev\n   */\n    const handlePipes = (id, data) => {\n      if (this._id === id) data.forEach((chunk) => this.push(chunk));\n    };\n\n    const handlePipeEnd = (id, data) => {\n      if (this._id !== id) {\n        return;\n      }\n      if (data) {\n        this.push(data);\n      }\n      this._socket.off(\"outbound-pipe\", handlePipe);\n      this._socket.off(\"outbound-pipes\", handlePipes);\n      this._socket.off(\"outbound-pipe-error\", handleError);\n      this._socket.off(\"outbound-pipe-end\", handlePipeEnd);\n      this.push(null);\n    };\n\n    const handleError = (id, err) => {\n      if (this._id !== id) {\n        return;\n      }\n      this._socket.off(\"outbound-pipe\", handlePipe);\n      this._socket.off(\"outbound-pipes\", handlePipes);\n      this._socket.off(\"outbound-pipe-error\", handleError);\n      this._socket.off(\"outbound-pipe-end\", handlePipeEnd);\n      this.destroy(new Error(err));\n    };\n\n    const handleResponse = (id, data) => {\n      if (this._id === id) {\n        this._socket.off(\"response\", handleResponse);\n        this._socket.off(\"request-error\", handleBadRequest);\n        this.emit(\n          \"response\",\n          data.statusCode,\n          data.statusMessage,\n          data.headers\n        );\n      }\n    };\n\n    const handleBadRequest = (id, err) => {\n      if (this._id === id) {\n        this._socket.off(\"request-error\", handleBadRequest);\n        this._socket.off(\"response\", handleResponse);\n        this._socket.off(\"outbound-pipe\", handlePipe);\n        this._socket.off(\"outbound-pipes\", handlePipes);\n        this._socket.off(\"outbound-pipe-error\", handleError);\n        this._socket.off(\"outbound-pipe-end\", handlePipeEnd);\n        this.emit(\"requestError\", err);\n      }\n    };\n\n    this._socket.on(\"response\", handleResponse);\n    this._socket.on(\"outbound-pipe\", handlePipe);\n    this._socket.on(\"outbound-pipes\", handlePipes);\n    this._socket.on(\"outbound-pipe-error\", handleError);\n    this._socket.on(\"outboound-pipe-end\", handlePipeEnd);\n    this._socket.on(\"request-error\", handleBadRequest);\n  }\n  _read(size) {}\n}\n"]}