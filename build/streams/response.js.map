{"version":3,"sources":["../../src/streams/response.js"],"names":["Readable","Response","constructor","id","socket","_socket","_id","handlePipe","data","push","handlePipes","forEach","chunk","handleStreamClose","off","handleStreamError","handleResponse","handleBadRequest","statusCode","statusMessage","headers","emit","error","err","destroy","Error","on","_read","size"],"mappings":"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","file":"response.js","sourcesContent":["import { Readable } from \"stream\";\nexport default class Response extends Readable {\n  constructor({ id, socket }) {\n    super();\n    this._socket = socket;\n    this._id = id;\n\n    /* The handlePipe function processes simple chunks of data being piped - \n    ideally this would be data streamed via _write\n    */\n    const handlePipe = (id, data) => {\n      if (this._id === id) {\n        this.push(data);\n      }\n    };\n    const handlePipes = (id, data) => {\n      if (this._id === id) {\n        data.forEach((chunk) => {\n          this.push(chunk);\n        });\n      }\n    };\n    const handleStreamClose = (id, data) => {\n      if (this._id !== id) return;\n      if (data) this.push(data);\n      this._socket.off(\"outbound-pipe\", handlePipe);\n      this._socket.off(\"outbound-pipes\", handlePipes);\n      this._socket.off(\"outbound-pipe-error\", handleStreamError);\n      this._socket.off(\"outbound-pipe-end\", handleStreamClose);\n      this.push(null);\n    };\n\n    const handleResponse = (id, data) => {\n      if (this._id === id) {\n        this._socket.off(\"request-error\", handleBadRequest);\n        this._socket.off(\"response\", handleResponse);\n        const { statusCode, statusMessage, headers } = data;\n        this.emit(\"response\", statusCode, statusMessage, headers);\n      }\n    };\n\n    const handleBadRequest = (id, error) => {\n      if (this._id === id) {\n        this._socket.off(\"response\", handleResponse);\n        this._socket.off(\"outbound-pipe\", handlePipe);\n        this._socket.off(\"outbound-pipes\", handlePipes);\n        this._socket.off(\"outbound-pipe-end\", handleStreamClose);\n        this._socket.off(\"outbound-pipe-error\", handleStreamError);\n        this._socket.off(\"request-error\", handleBadRequest);\n        this.emit(\"requestError\", error);\n      }\n    };\n\n    const handleStreamError = (id, err) => {\n      if (this._id !== id) {\n        return;\n      }\n      this._socket.off(\"outbound-pipe\", handlePipe);\n      this._socket.off(\"outbound-pipes\", handlePipes);\n      this._socket.off(\"outbound-pipe-error\", handleStreamError);\n      this._socket.off(\"outbound-pipe-end\", handleStreamClose);\n      this.destroy(new Error(err));\n    };\n\n    this._socket.on(\"response\", handleResponse);\n    this._socket.on(\"outbound-pipe\", handlePipe);\n    this._socket.on(\"outbound-pipes\", handlePipes);\n    this._socket.on(\"outbound-pipe-end\", handleStreamClose);\n    this._socket.on(\"request-error\", handleBadRequest);\n    this._socket.on(\"outbound-pipe-error\", handleStreamError);\n  }\n\n  _read(size) {}\n}\n"]}