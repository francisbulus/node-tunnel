{"version":3,"sources":["../../src/streams/request.js"],"names":["Writable","Request","constructor","id","socket","req","_socket","_id","emit","_write","data","enc","next","conn","once","_writev","_destroy","err","message","_final"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;;AAEA,eAAe,MAAMC,OAAN,SAAsBD,QAAtB,CAA+B;AAC5CE,cAAY,EAAEC,EAAF,EAAMC,MAAN,EAAcC,GAAd,EAAZ,EAAiC;AAC/B;AACA,SAAKC,OAAL,GAAeF,MAAf;AACA,SAAKG,GAAL,GAAWJ,EAAX;AACA,SAAKG,OAAL,CAAaE,IAAb,CAAkB,SAAlB,EAA6BL,EAA7B,EAAiCE,GAAjC;AACD;;AAED;;;;AAIAI,SAAOC,IAAP,EAAaC,GAAb,EAAkBC,IAAlB,EAAwB;AACtB,SAAKN,OAAL,CAAaE,IAAb,CAAkB,cAAlB,EAAkC,KAAKD,GAAvC,EAA4CG,IAA5C;AACA,SAAKJ,OAAL,CAAaO,IAAb,CAAkBC,IAAlB,CAAuB,OAAvB,EAAgC,MAAM;AACpCF;AACD,KAFD;AAGD;;AAED;;;;;;;;AASAG,UAAQL,IAAR,EAAcE,IAAd,EAAoB;AAClB,SAAKN,OAAL,CAAaE,IAAb,CAAkB,eAAlB,EAAmC,KAAKD,GAAxC,EAA6CG,IAA7C;AACA,SAAKJ,OAAL,CAAaO,IAAb,CAAkBC,IAAlB,CAAuB,OAAvB,EAAgC,MAAM;AACpCF;AACD,KAFD;AAGD;;AAEDI,WAASC,GAAT,EAAcL,IAAd,EAAoB;AAClB,QAAI,CAACK,GAAL,EAAUL;AACV,SAAKN,OAAL,CAAaE,IAAb,CAAkB,oBAAlB,EAAwC,KAAKD,GAA7C,EAAkDU,OAAOA,IAAIC,OAA7D;AACA,SAAKZ,OAAL,CAAaO,IAAb,CAAkBC,IAAlB,CAAuB,OAAvB,EAAgC,MAAM;AACpCF;AACD,KAFD;AAGA;AACD;;AAEDO,SAAOP,IAAP,EAAa;AACX,SAAKN,OAAL,CAAaE,IAAb,CAAkB,kBAAlB,EAAsC,KAAKD,GAA3C;AACA,SAAKD,OAAL,CAAaO,IAAb,CAAkBC,IAAlB,CAAuB,OAAvB,EAAgC,MAAM;AACpCF;AACD,KAFD;AAGD;AAjD2C","file":"request.js","sourcesContent":["import { Writable } from \"stream\";\n\nexport default class Request extends Writable {\n  constructor({ id, socket, req }) {\n    super();\n    this._socket = socket;\n    this._id = id;\n    this._socket.emit(\"request\", id, req);\n  }\n\n  /*\n This adds the write functionality - native to the response stream - to the custom request \n stream\n  */\n  _write(data, enc, next) {\n    this._socket.emit(\"inbound-pipe\", this._id, data);\n    this._socket.conn.once(\"drain\", () => {\n      next();\n    });\n  }\n\n  /* \n  For processing multiple chunks at once.From the Node docs:\n  If a stream implementation is capable of processing \n  multiple chunks of data at once, \n  the writable._writev() method should be implemented.\n\n  Within the context of the app, it accepts the data - in chunks - that \n  will be sent to the local server\n  */\n  _writev(data, next) {\n    this._socket.emit(\"inbound-pipes\", this._id, data);\n    this._socket.conn.once(\"drain\", () => {\n      next();\n    });\n  }\n\n  _destroy(err, next) {\n    if (!err) next();\n    this._socket.emit(\"inbound-pipe-error\", this._id, err && err.message);\n    this._socket.conn.once(\"drain\", () => {\n      next();\n    });\n    return;\n  }\n\n  _final(next) {\n    this._socket.emit(\"inbound-pipe-end\", this._id);\n    this._socket.conn.once(\"drain\", () => {\n      next();\n    });\n  }\n}\n"]}